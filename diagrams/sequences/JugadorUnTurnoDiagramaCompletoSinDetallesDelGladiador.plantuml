@startuml
actor Actor as "actor"
participant AlgoRoma as ":AlgoRoma"
participant JuegoEnCurso as ":JuegoEnCurso"
participant Dado as ":dado"
participant Gladiador as "gladiador : Gladiador"
participant ObservableAlgoRoma as ":ObservableAlgoRoma"
participant Mapa as ":Mapa"
participant Camino as ":Camino"
participant Celda as "celdaDestino : Celda"
participant Consecuencia as ":Consecuencia"
participant ObservableMapa as ":ObservableMap"

  activate Actor
    Actor->AlgoRoma: jugarTurno()
    activate AlgoRoma
      AlgoRoma->JuegoEnCurso: jugarTurno()
      activate JuegoEnCurso
        JuegoEnCurso->AlgoRoma: jugarTurnoSegunEstado(this)
          activate AlgoRoma
          AlgoRoma->AlgoRoma: avanzarGladiador()
          AlgoRoma->ObservableAlgoRoma: notificarNuevoTurno()
          activate ObservableAlgoRoma
          AlgoRoma<--ObservableAlgoRoma: void
          deactivate ObservableAlgoRoma
          AlgoRoma->Dado: tirarDado()
          activate Dado
          Dado-->AlgoRoma: int dadoResultado
          deactivate Dado
          AlgoRoma->Mapa: avanzarNPosicionesGladiador(gladiador, dadoResultado)
          deactivate AlgoRoma
          activate Mapa
            Mapa->Camino: proximoEnNPosiciones(celdaActual, dadoResultado)
            activate Camino
            Mapa<--Camino: celdaDestino: Celda
            deactivate Camino
            Mapa->Gladiador: avanzar()
            activate Gladiador
            note over Gladiador: Para mas detalles, mirar diagramas de avanzar Gladiador
            Mapa<--Gladiador: void
            Mapa->Celda: afectarGladiadorConConsecuencia(gladiador)
            loop for (IConsecuencia consecuencia : consecuencias)
            activate Celda
              Celda->Consecuencia: afectarGladiador(gladiador)
              activate Consecuencia
              Consecuencia->Gladiador: afeccion de acuerdo al tipo de consecuencia (comer, lesionar, atacar, etc)
              Gladiador-->Consecuencia: void
              deactivate Gladiador
              Consecuencia-->Celda: void
              deactivate Consecuencia
            end
            Mapa<--Celda: void
            deactivate Celda
            Mapa->ObservableMapa: notificarPosicionamientoDeGladiador(gladiador, celdaDestino.getCoordenada()
            activate ObservableMapa
            Mapa<--ObservableMapa: void
            deactivate ObservableMapa
          JuegoEnCurso<--Mapa: void
          deactivate Mapa
      AlgoRoma<--JuegoEnCurso: void
      deactivate JuegoEnCurso
    Actor<--AlgoRoma: void
    deactivate AlgoRoma

  deactivate Actor
@enduml