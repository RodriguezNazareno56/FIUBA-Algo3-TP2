@startuml
actor Actor as "actor"
participant Gladiador as ":Gladiador"
participant Energia as ":Energia"
participant Senority as ":Senority"
participant NovatoState as ":NovatoState"
participant ObservableEnergia as ":ObservableEnergia"
participant ObservableSenorityState as ":ObservableSenorityState"
participant SemiSeniorState as ":SemiSeniorState"
participant EnergiaExtra as "energiaExtra :Energia"

    Actor->Gladiador: avanzar
        activate Gladiador
          Gladiador->Energia: isAgotada()
          activate Energia
          Gladiador<--Energia: false
          deactivate Energia
          Gladiador->Senority: aumentarEnergia(this.energia)
          activate Senority
            Senority->NovatoState: aumentarEnergia(energia)
            activate NovatoState
            note over SemiSeniorState : int NOVATO_STATE_INCREMENTO_DE_ENERGIA = 0
            NovatoState->EnergiaExtra: << createRequest >> Energia(NOVATO_STATE_INCREMENTO_DE_ENERGIA)
            activate EnergiaExtra
            EnergiaExtra-->NovatoState: RequestCreated : energiaExtra
            deactivate EnergiaExtra
              NovatoState->Energia: aumentarEnergia(energiaExtra)
              activate Energia
              Energia->Energia: cambiarValor(nuevoValor)
                Energia->ObservableEnergia: notificar(nuevoValor)
                activate ObservableEnergia
                Energia<--ObservableEnergia: void
                deactivate ObservableEnergia
              NovatoState<--Energia: void
              deactivate Energia
            Senority<--NovatoState: void
            deactivate NovatoState
          Gladiador<--Senority: void
          deactivate Senority
      Gladiador->Senority: aumentarExperiencia()
      activate Senority
        Senority->NovatoState: aumentarExperiencia()
        opt 8 rondas jugadas como experiencia
        activate NovatoState
          NovatoState->SemiSeniorState: << createRequest >>
          activate SemiSeniorState
          SemiSeniorState-->NovatoState: RequestCreated : semiSeniorState
          NovatoState->ObservableSenorityState: notificarCambioDeSenority()
          activate ObservableSenorityState
          NovatoState<--ObservableSenorityState: void
          deactivate ObservableSenorityState
          NovatoState->ObservableSenorityState: transferirObservadoresA(semiSeniorState)
          activate ObservableSenorityState
          loop for (ObservadorSenority observador : observadores)
          ObservableSenorityState->SemiSeniorState: agregarObservador(observador)
          end
          deactivate SemiSeniorState
          NovatoState<--ObservableSenorityState: void
          end
          deactivate ObservableSenorityState
        Senority<--NovatoState: senority.states.SemiSeniorState
        deactivate NovatoState
      Gladiador<--Senority: void
      deactivate Senority
    Actor<--Gladiador: void
    deactivate Gladiador

@enduml